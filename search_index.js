var documenterSearchIndex = {"docs":
[{"location":"reference/#Index","page":"Alphabetical function list","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Alphabetical function list","title":"Alphabetical function list","text":"","category":"page"},{"location":"reference/api/","page":"Function reference","title":"Function reference","text":"Modules = [Minc2]\nPages = [\n    \"geo_transform.jl\",\n    \"minc2_io.jl\",\n    \"jminc.jl\",\n    \"minc_hl.jl\",\n    \"minc_makie.jl\",\n    \"nifti_io.jl\",\n    \"xfm_io.jl\",\n]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"reference/api/#Base.show-Union{Tuple{I}, Tuple{F}, Tuple{T}, Tuple{IO, Minc2.GridTransform{T, F, I}}} where {T, F, I}","page":"Function reference","title":"Base.show","text":"Print summary information about grid transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Base.show-Union{Tuple{I}, Tuple{F}, Tuple{T}, Tuple{IO, Minc2.InverseGridTransform{T, F, I}}} where {T, F, I}","page":"Function reference","title":"Base.show","text":"Print summary information about grid transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.array-Tuple{Minc2.GridTransform}","page":"Function reference","title":"Minc2.array","text":"array(grid::GridTransform)\n\nExtract underlying plain array\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.array-Tuple{Minc2.InverseGridTransform}","page":"Function reference","title":"Minc2.array","text":"array(grid::InverseGridTransform)\n\nExtract underlying plain array\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.decompose-Tuple{Any, Any}","page":"Function reference","title":"Minc2.decompose","text":"decompose(rot, shift)\n\nDecompose affine transform specified as rotation matrix ans shift vector into three components start, step, direction cosines\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.decompose-Union{Tuple{Matrix{T}}, Tuple{T}} where T","page":"Function reference","title":"Minc2.decompose","text":"decompose(tfm::Matrix{T})\n\nDecompose affine transform into three components start, step, direction cosines\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.decompose-Union{Tuple{Minc2.AffineTransform{T}}, Tuple{T}} where T","page":"Function reference","title":"Minc2.decompose","text":"decompose(tfm::AffineTransform{T})\n\nDecompose affine transform into three components start, step, direction cosines\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.interpolate_field-Union{Tuple{I}, Tuple{T}, Tuple{Minc2.AffineTransform{T}, I, StaticArraysCore.SVector{3, T}}} where {T, I<:Interpolations.Extrapolation}","page":"Function reference","title":"Minc2.interpolate_field","text":"interpolate_field(\n        v2w::AffineTransform{T},\n        itp_vector_field::I, \n        p::SVector{3,T} )::SVector{3,T}\n\nInternal support function\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inv-Tuple{Minc2.IdentityTransform}","page":"Function reference","title":"Minc2.inv","text":"inv(::IdentityTransform)::IdentityTransform\n\nInvert IdentityTransform transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inv-Union{Tuple{Minc2.AffineTransform{T}}, Tuple{T}} where T","page":"Function reference","title":"Minc2.inv","text":"inv(t::AffineTransform{T})::AffineTransform{T}\n\nInvert AffineTransform transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inv-Union{Tuple{Minc2.GridTransform{T, F, VF}}, Tuple{VF}, Tuple{F}, Tuple{T}} where {T, F, VF}","page":"Function reference","title":"Minc2.inv","text":"inv(t::GridTransform{T,F,VF})::InverseGridTransform{T,F,VF}\n\nInvert GridTransform transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inv-Union{Tuple{Minc2.InverseGridTransform{T, F, VF}}, Tuple{VF}, Tuple{F}, Tuple{T}} where {T, F, VF}","page":"Function reference","title":"Minc2.inv","text":"inv(t::InverseGridTransform{T,F,VF})::GridTransform{T,F,VF}\n\nInvert InverseGridTransform transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inv-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Minc2.AnyTransform","page":"Function reference","title":"Minc2.inv","text":"inv(t::Vector{T})::Vector{AnyTransform}\n\nInvert concatenated transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Union{Tuple{F}, Tuple{T}, Tuple{Minc2.GridTransform{T, F}, StaticArraysCore.SVector{3, T}}} where {T, F}","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(\n        tfm::GridTransform{T,F}, p::SVector{3,T};\n        _whatever...)::SVector{3,T} where {T,F}\n\nApply forward grid transform to a point\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Union{Tuple{F}, Tuple{T}, Tuple{Minc2.InverseGridTransform{T, F}, StaticArraysCore.SVector{3, T}}} where {T, F}","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(\n    tfm::AffineTransform{T}, \n    p::CartesianIndex{3};\n    _whatever...)::SVector{3,T}\n\nApply inverse grid transform reimplements algorithm from MNIformats/gridtransforms.c:gridinversetransform_point\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Union{Tuple{T}, Tuple{Minc2.AffineTransform{T}, CartesianIndex{3}}} where T","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(\n    tfm::AffineTransform{T}, \n    p::CartesianIndex{3};\n    _whatever...)::SVector{3,T}\n\nApply affine transform to CartesianIndices\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Union{Tuple{T}, Tuple{Minc2.AffineTransform{T}, StaticArraysCore.SVector{3, T}}} where T","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(\n        tfm::AffineTransform{T}, \n        p::SVector{3,T};\n        _whatever...)::SVector{3,T}\n\nApply affine transform to a point\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Union{Tuple{T}, Tuple{XFM}, Tuple{Vector{XFM}, StaticArraysCore.SVector{3, T}}} where {XFM<:Minc2.AnyTransform, T}","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(\n    tfm::Vector{XFM},\n    p::SVector{3,T};\n    max_iter::Int=10,\n    ftol::Float64=1.0/80)::SVector{3,T}\n\nApply concatenated transform to a point\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.voxel_to_world-Tuple{Minc2.GridTransform}","page":"Function reference","title":"Minc2.voxel_to_world","text":"voxel_to_world(grid::GridTransform)\n\nExtract voxel to world affine transform from a GridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.voxel_to_world-Tuple{Minc2.InverseGridTransform}","page":"Function reference","title":"Minc2.voxel_to_world","text":"voxel_to_world(grid::InverseGridTransform)\n\nExtract voxel to world affine transform from a InverseGridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.world_to_voxel-Tuple{Minc2.GridTransform}","page":"Function reference","title":"Minc2.world_to_voxel","text":"world_to_voxel(grid::GridTransform)\n\nExtract world to voxel affine transform from a GridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.world_to_voxel-Tuple{Minc2.InverseGridTransform}","page":"Function reference","title":"Minc2.world_to_voxel","text":"world_to_voxel(grid::InverseGridTransform)\n\nExtract world to voxel affine transform from a InverseGridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.AffineTransform","page":"Function reference","title":"Minc2.AffineTransform","text":"Affine transform, described by rotation matrix and shift vector\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.AffineTransform-Tuple{Any, Any}","page":"Function reference","title":"Minc2.AffineTransform","text":"Create affine transform from rotation matrix-like object (3x3) and shift vector-like object (3)\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.AffineTransform-Tuple{Any}","page":"Function reference","title":"Minc2.AffineTransform","text":"Create affine transform from a matrix-like object  (4x4 or 3x4)\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.AffineTransform-Union{Tuple{}, Tuple{Type{T}}, Tuple{T}} where T","page":"Function reference","title":"Minc2.AffineTransform","text":"Create identity transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.AnyTransform","page":"Function reference","title":"Minc2.AnyTransform","text":"Any 3D Geometrical transform\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.GeoTransforms","page":"Function reference","title":"Minc2.GeoTransforms","text":"Concatenated transforms\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.GridTransform","page":"Function reference","title":"Minc2.GridTransform","text":"Dense vector field transform (grid transform)\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.GridTransform-Union{Tuple{F}, Tuple{T}, Tuple{Minc2.AffineTransform{T}, Array{F, 4}}} where {T, F}","page":"Function reference","title":"Minc2.GridTransform","text":"GridTransform(\n    voxel_to_world::AffineTransform{T},\n    vector_field::Array{F, 4})\n\nConstruct GridTransform from voxel to world transform and a vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.GridTransform-Union{Tuple{}, Tuple{Type{T}}, Tuple{F}, Tuple{T}, Tuple{Type{T}, Type{F}}} where {T, F}","page":"Function reference","title":"Minc2.GridTransform","text":"GridTransform(::Type{T}=Float64,::Type{F}=Float64)\n\nConstruct empty GridTransform, which should generate identity transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.IdentityTransform","page":"Function reference","title":"Minc2.IdentityTransform","text":"Identity transform\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.InverseGridTransform","page":"Function reference","title":"Minc2.InverseGridTransform","text":"struct InverseGridTransform{T,F,VF} <: AnyTransform\n\nDense vector field transform (GridTransform) used in inverse\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.InverseGridTransform-Union{Tuple{F}, Tuple{T}, Tuple{Minc2.AffineTransform{T}, Array{F, 4}}} where {T, F}","page":"Function reference","title":"Minc2.InverseGridTransform","text":"InverseGridTransform(\n    voxel_to_world::AffineTransform{T},\n    vector_field::Array{F, 4})\n\nConstruct InverseGridTransform from voxel to world transform     and a vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.InverseGridTransform-Union{Tuple{}, Tuple{Type{T}}, Tuple{F}, Tuple{T}, Tuple{Type{T}, Type{F}}} where {T, F}","page":"Function reference","title":"Minc2.InverseGridTransform","text":"InverseGridTransform(::Type{T}=Float64,::Type{F}=Float64)\n\nConstruct InverseGridTransform empty transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.@minc2_check-Tuple{Any}","page":"Function reference","title":"Minc2.@minc2_check","text":"minc2_check( ex )\n\nMacro to verify the return code\n\n\n\n\n\n","category":"macro"},{"location":"reference/api/#Minc2._hdr_convert!-Tuple{Minc2.MincHeader, Any}","page":"Function reference","title":"Minc2._hdr_convert!","text":"_hdr_convert!(hdr::MincHeader,dd)::MincHeader\n\ninternal function\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.attributes-Tuple{Minc2.VolumeHandle, String}","page":"Function reference","title":"Minc2.attributes","text":"attributes(h::VolumeHandle, g::String)\n\nList attributes defined inside given group\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.close_minc_file-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.close_minc_file","text":"close_minc_file(h::VolumeHandle)\n\nClose currently open minc file, commit data on disk\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.copy_minc_metadata-Tuple{Minc2.VolumeHandle, Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.copy_minc_metadata","text":"copy_minc_metadata(i::VolumeHandle, o::VolumeHandle)\n\nCopy metadata from one file to another\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.create_header_from_v2w-Union{Tuple{T}, Tuple{Any, Minc2.AffineTransform{T}}} where T","page":"Function reference","title":"Minc2.create_header_from_v2w","text":"create_header_from_v2w(\n    sz, t::AffineTransform{T};\n    vector_dim::Bool=false, \n    time_step::Union{Float64,Nothing}=nothing,\n    time_start::Union{Float64,Nothing}=nothing)::MincHeader\n\nInternal: Generate header from the voxel to world transform and volume size\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.create_minc_file-Tuple{Minc2.VolumeHandle, AbstractString}","page":"Function reference","title":"Minc2.create_minc_file","text":"create_minc_file(h::VolumeHandle, path::AbstractString)\n\nCreate empty minc file on disk, structure need to be defined in advance\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.define_minc_file-Union{Tuple{Minc2.MincHeader}, Tuple{Repr}, Tuple{Store}, Tuple{Minc2.MincHeader, Type{Store}}, Tuple{Minc2.MincHeader, Type{Store}, Type{Repr}}} where {Store, Repr}","page":"Function reference","title":"Minc2.define_minc_file","text":"define_minc_file(hdr::MincHeader,::Type{Store}=Float32,::Type{Repr}=Store)\n\nDefine new minc file structure, return handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_like_minc_volume_raw-Union{Tuple{Minc2.VolumeHandle}, Tuple{T}, Tuple{Minc2.VolumeHandle, Type{T}}} where T","page":"Function reference","title":"Minc2.empty_like_minc_volume_raw","text":"empty_like_minc_volume_raw( h::VolumeHandle,\n    ::Type{T}=Float32 )::Tuple{Array{T}, Minc2.MincHeader}\n\nAllocate empty volume using handle return volume, storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_like_minc_volume_raw-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.empty_like_minc_volume_raw","text":"empty_like_minc_volume_raw(path::String, ::Type{T}=Float32 )::\n        Tuple{Array{T}, Minc2.MincHeader}\n\nCreate empty volume similar to existing file return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_like_minc_volume_std-Union{Tuple{Minc2.VolumeHandle}, Tuple{T}, Tuple{Minc2.VolumeHandle, Type{T}}} where T","page":"Function reference","title":"Minc2.empty_like_minc_volume_std","text":"empty_like_minc_volume_std(h::VolumeHandle, \n    ::Type{T}=Float32 )::Tuple{Array{T}, Minc2.MincHeader, Minc2.MincHeader}\n\nRead the actual volume using handle return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_like_minc_volume_std-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.empty_like_minc_volume_std","text":"empty_like_minc_volume_std(path::String, \n    ::Type{T}=Float32 )::Tuple{Array{T}, Minc2.MincHeader, Minc2.MincHeader}\n\nallocate empty volume using path as a reference return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_like_minc_volume_std_history-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.empty_like_minc_volume_std_history","text":"empty_like_minc_volume_std_history(path::String, ::Type{T}=Float32 )\n\nallocate empty volume using path return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_attribute-Tuple{Minc2.VolumeHandle, String, String}","page":"Function reference","title":"Minc2.get_attribute","text":"get_attribute(h::VolumeHandle,g::String,a::String; default=missing)\n\nConvenience function for reading specific attribute, return default value if not found also convert Array into the first value if it's a one-length array\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.groups-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.groups","text":"groups(h::VolumeHandle)\n\nList groups defined in minc2 file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.ndim-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.ndim","text":"ndim(h::VolumeHandle)::Int\n\nQuery number of dimensions in the minc file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.open_minc_file-Tuple{String}","page":"Function reference","title":"Minc2.open_minc_file","text":"open_minc_file(fname::String)::VolumeHandle\n\nOpen minc file, return handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_attribute-Tuple{Minc2.VolumeHandle, String, String}","page":"Function reference","title":"Minc2.read_attribute","text":"read_attribute(h::VolumeHandle, \n    group::String,\n    attribute::String)::Union{String, AbstractVector, Nothing}\n\nRead minc2 header attribute :param group: attribute group name :param attribute: attribute name :return:\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_history-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.read_history","text":"read_history(i::VolumeHandle)::Union{String, Nothing}\n\nReturn history string\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_raw-Union{Tuple{Minc2.VolumeHandle}, Tuple{T}, Tuple{Minc2.VolumeHandle, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_raw","text":"read_minc_volume_raw(h::VolumeHandle, \n    ::Type{T}=Float32 )::Tuple{Array{T}, Minc2.MincHeader}\n\nRead the actual volume using handle return volume, storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_raw-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_raw","text":"read_minc_volume_raw(path::String, ::Type{T}=Float32 )::\n    Tuple{Array{T}, Minc2.MincHeader}\n\nRead the actual volume using path return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_raw_history-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_raw_history","text":"read_minc_volume_raw_history(path::String, ::Type{T}=Float32 )\n\nRead the actual volume using path return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_std-Union{Tuple{Minc2.VolumeHandle}, Tuple{T}, Tuple{Minc2.VolumeHandle, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_std","text":"read_minc_volume_std(h::VolumeHandle, \n    ::Type{T}=Float32 )::Tuple{Array{T}, Minc2.MincHeader, Minc2.MincHeader}\n\nRead the actual volume using handle return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_std-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_std","text":"read_minc_volume_std(path::String, ::Type{T}=Float32 )::\n    Tuple{Array{T}, Minc2.MincHeader, Minc2.MincHeader}\n\nRead the actual volume using path return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_minc_volume_std_history-Union{Tuple{String}, Tuple{T}, Tuple{String, Type{T}}} where T","page":"Function reference","title":"Minc2.read_minc_volume_std_history","text":"read_minc_volume_std_history(path::String, ::Type{T}=Float32 )::\n    Tuple{Array{T}, Minc2.MincHeader, Minc2.MincHeader, Union{String,Nothing}}\n\nRead the actual volume using path return volume, representation header,storage header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.representation_header-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.representation_header","text":"representation_header(h::VolumeHandle)::MincHeader\n\nReturn volume representation header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.setup_standard_order-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.setup_standard_order","text":"setup_standard_order(h::VolumeHandle)\n\nPrepare to read volume in standard order: [V,X,Y,Z,TIME]\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.store_header-Tuple{Minc2.VolumeHandle}","page":"Function reference","title":"Minc2.store_header","text":"store_header(h::VolumeHandle)::MincHeader\n\nReturn volume on-disk stucture header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.voxel_to_world-Tuple{Minc2.MincHeader}","page":"Function reference","title":"Minc2.voxel_to_world","text":"voxel_to_world(hdr::MincHeader)::AffineTransform{Float64}\n\nGive AffineTransform for world to voxel transformation based on header\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.voxel_to_world-Tuple{Minc2.VolumeHandle, Vector{Float64}}","page":"Function reference","title":"Minc2.voxel_to_world","text":"voxel_to_world(h::VolumeHandle,ijk::Vector{Float64})::Vector{Float64}\n\nConvert contignuous 0-based voxel indexes (I,J,K) to world coordinates (X,Y,Z) 0-based\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.world_to_voxel-Tuple{Minc2.MincHeader}","page":"Function reference","title":"Minc2.world_to_voxel","text":"world_to_voxel(hdr::MincHeader)::AffineTransform{Float64}\n\nGive AffineTransform for voxel to world transformation\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.world_to_voxel-Tuple{Minc2.VolumeHandle, Vector{Float64}}","page":"Function reference","title":"Minc2.world_to_voxel","text":"world_to_voxel(h::VolumeHandle, xyz::Vector{Float64})::Vector{Float64}\n\nConvert world coordinates (X,Y,Z) to contignuous voxel indexes (I,J,K) 0-based\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_attribute-Union{Tuple{T}, Tuple{Minc2.VolumeHandle, String, String, T}} where T","page":"Function reference","title":"Minc2.write_attribute","text":"write_attribute(h::VolumeHandle, group::String, attribute::String, value::T)\n\nStore attribute into minc2 file :param group:  group name :param attribute:  attribute name :param value:  attribute value :return:\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_history-Tuple{Minc2.VolumeHandle, String}","page":"Function reference","title":"Minc2.write_history","text":"write_history(i::VolumeHandle, history::String)\n\nWrite history string\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_minc_volume_raw-Union{Tuple{Repr}, Tuple{Store}, Tuple{String, Type{Store}, Union{Nothing, Minc2.MincHeader}, Array{Repr}}} where {Store, Repr}","page":"Function reference","title":"Minc2.write_minc_volume_raw","text":"write_minc_volume_raw(path::String, ::Type{Store}, \n    store_hdr::Union{MincHeader, Nothing}, \n    volume::Array{Repr};like::Union{String, Nothing}=nothing, \n    history::Union{String, Nothing}=nothing )\n\nWrite full volume to file, need to provide details of file structure return nothing\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_minc_volume_raw-Union{Tuple{T}, Tuple{Minc2.VolumeHandle, Array{T}}} where T","page":"Function reference","title":"Minc2.write_minc_volume_raw","text":"write_minc_volume_raw(h::VolumeHandle, volume::Array{T} )\n\nwrite full volume to file, file should be defined and created return nothing\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_minc_volume_std-Union{Tuple{Repr}, Tuple{Store}, Tuple{String, Type{Store}, Union{Nothing, Minc2.MincHeader}, Array{Repr}}} where {Store, Repr}","page":"Function reference","title":"Minc2.write_minc_volume_std","text":"write_minc_volume_std(path::String, ::Type{Store}, \n    store_hdr::Union{MincHeader, Nothing}, \n    volume::Array{Repr};like::Union{String, Nothing}=nothing, \n    history::Union{String, Nothing}=nothing )\n\nWrite full volume to file, need to provide details of file structure return nothing\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_minc_volume_std-Union{Tuple{T}, Tuple{Minc2.VolumeHandle, Array{T}}} where T","page":"Function reference","title":"Minc2.write_minc_volume_std","text":"write_minc_volume_std(h::VolumeHandle, volume::Array{T} )\n\nwrite full volume to file, file should be defined and created return nothing\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.DIM","page":"Function reference","title":"Minc2.DIM","text":"Low Level: Axis types from MINC volume\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.Minc2Error","page":"Function reference","title":"Minc2.Minc2Error","text":"MINC io exception\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.MincHeader","page":"Function reference","title":"Minc2.MincHeader","text":"MincHeader\n\nStructure describing spatial orientation and sampling of the minc file \n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.STATUS","page":"Function reference","title":"Minc2.STATUS","text":"Low Level: minc2_simple API status\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.VolumeHandle","page":"Function reference","title":"Minc2.VolumeHandle","text":"VolumeHandle\n\nminc2_simple volume handle\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.julia_to_minc2","page":"Function reference","title":"Minc2.julia_to_minc2","text":"Low Level: map Julia types to minc2 data types\n\n\n\n\n\n","category":"constant"},{"location":"reference/api/#Minc2.minc2_spatial","page":"Function reference","title":"Minc2.minc2_spatial","text":"Low Level: Mapping MINC2 spatial dimensions to proper spatial dimension (should be identity for spatial dims)\n\n\n\n\n\n","category":"constant"},{"location":"reference/api/#Minc2.minc2_to_julia","page":"Function reference","title":"Minc2.minc2_to_julia","text":"Low Level: map MINC2 types to Julia\n\n\n\n\n\n","category":"constant"},{"location":"reference/api/#Minc2.array-Tuple{Minc2.Volume3D}","page":"Function reference","title":"Minc2.array","text":"array(vol::Volume3D)\n\nExtract underlying plain array\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.calculate_jacobian!-Union{Tuple{XFM}, Tuple{I}, Tuple{T}, Tuple{C}, Tuple{Union{Vector{XFM}, XFM}, AbstractArray{T, 3}, Minc2.AffineTransform{C}}} where {C, T, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.calculate_jacobian!","text":"calculate_jacobian!(\n    tfm::Union{Vector{XFM},XFM},\n    out_vol::AbstractArray{T,3},\n    out_v2w::AffineTransform{C};\n    interp::I=BSpline(Quadratic(Line(OnCell()))),\n    ftol=1.0/80,\n    max_iter=10)\n\nCalculate dense jacobian determinant field for an arbitrary transformation\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.calculate_jacobian!-Union{Tuple{XFM}, Tuple{I}, Tuple{T}, Tuple{Union{Vector{XFM}, XFM}, Minc2.Volume3D{T, 3}}} where {T, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.calculate_jacobian!","text":"calculate_jacobian!(\n    tfm::Union{Vector{XFM},XFM}, \n    out_vol::Volume3D{T,3}; \n    interp::I=BSpline(Quadratic(Line(OnCell()))),\n    ftol=1.0/80,\n    max_iter=10)::Volume3D{T,3}\n\nCalculate dense jacobian determinant field for an arbitrary transformation\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_volume_like-Union{Tuple{Minc2.Volume3D{T1, N}}, Tuple{N}, Tuple{T}, Tuple{T1}} where {T1, T, N}","page":"Function reference","title":"Minc2.empty_volume_like","text":"empty_volume_like(\n    vol::Volume3D{T1,N}; \n    store::Type{T}=Float64, \n    history=nothing)\n\nCreate an empty Volume3D\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.empty_volume_like-Union{Tuple{String}, Tuple{T}} where T","page":"Function reference","title":"Minc2.empty_volume_like","text":"empty_volume_like(\n        fn::String; \n        store::Type{T}=Float64, history=nothing)::Volume3D{T}\n\nCreate an empty Volume3D\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.format_history-Tuple{Any}","page":"Function reference","title":"Minc2.format_history","text":"format_history(args)::String\n\nGenerate minc-style history from program args\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.normalize_tfm-Union{Tuple{G}, Tuple{XFM}, Tuple{T}, Tuple{Union{Vector{XFM}, XFM}, G}} where {T, XFM<:Minc2.AnyTransform, G<:Minc2.GridTransform}","page":"Function reference","title":"Minc2.normalize_tfm","text":"normalize_tfm(tfm::Union{Vector{XFM}, XFM},\n    ref::G;\n    store::Type{T}=Float64,ftol=1.0/80,max_iter=10)::GridTransform{Float64,T}\n\nConvert arbitrary transformation  into a single GridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.normalize_tfm-Union{Tuple{G}, Tuple{XFM}, Tuple{T}, Tuple{Union{Vector{XFM}, XFM}, G}} where {T, XFM<:Minc2.AnyTransform, G<:Minc2.Volume3D}","page":"Function reference","title":"Minc2.normalize_tfm","text":"normalize_tfm(tfm::Union{Vector{XFM}, XFM},\n    ref::G;\n    store::Type{T}=Float64,ftol=1.0/80,max_iter=10)::GridTransform{Float64,T}\n\nConvert arbitrary transformation  into a single GridTransform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_volume-Union{Tuple{String}, Tuple{T}} where T","page":"Function reference","title":"Minc2.read_volume","text":"read_volume(fn::String; store::Type{T}=Float64)::Volume3D{T}\n\nRead Volume3D from minc file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.resample_grid-Union{Tuple{XFM}, Tuple{L}, Tuple{T}, Tuple{Minc2.Volume3D{T, 4}, Union{Vector{XFM}, XFM}}} where {T, L, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.resample_grid","text":"resample_grid(\n    in_grid::Volume3D{T,4}, \n    itfm::Union{Vector{XFM}, XFM}; \n    like::Union{Nothing,Volume3D{L,4}}=nothing)::Volume3D{T,4}\n\nResample Volume3D that contain 4D array, using transformation, assume 1st dimension is non spatial\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.resample_grid_volume!-Union{Tuple{XFM}, Tuple{I}, Tuple{C}, Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractArray{T, 4}, Minc2.AffineTransform{C}, Minc2.AffineTransform{C}, Union{Vector{XFM}, XFM}}} where {T, C, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.resample_grid_volume!","text":"resample_grid_volume!(\n    in_vol::AbstractArray{T,4},\n    out_vol::AbstractArray{T,4},\n    v2w::AffineTransform{C}, \n    w2v::AffineTransform{C}, \n    itfm::Union{Vector{XFM}, XFM};\n    interp::I=BSpline(Quadratic(Line(OnCell()))),\n    fill=0.0,\n    ftol=1.0/80,\n    max_iter=10)::AbstractArray{T,4}\n\nResample 4D array using transformation, assume 1st dimension is non spatial (vector dimension)\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.resample_volume!-Union{Tuple{XFM}, Tuple{I}, Tuple{O}, Tuple{T}, Tuple{Minc2.Volume3D{T, 3}, Minc2.Volume3D{O, 3}}} where {T, O, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.resample_volume!","text":"resample_volume!(\n    in_vol::Volume3D{T,3}, \n    out_vol::Volume3D{O,3}; \n    tfm::Union{Vector{XFM},XFM,Nothing}=nothing, \n    itfm::Union{Vector{XFM},XFM,Nothing}=nothing, \n    interp::I=nothing, \n    fill=0.0, \n    order=nothing,\n    ftol=1.0/80,\n    max_iter=10)::Volume3D{O,3}\n\nResample Volume3D using transformation \n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.resample_volume!-Union{Tuple{XFM}, Tuple{I}, Tuple{T}, Tuple{C}, Tuple{AbstractArray{T, 3}, AbstractArray{T, 3}, Minc2.AffineTransform{C}, Minc2.AffineTransform{C}, Union{Vector{XFM}, XFM}}} where {C, T, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.resample_volume!","text":"resample_volume!(in_vol::AbstractArray{T,3}, \n    out_vol::AbstractArray{T,3}, \n    v2w::AffineTransform{C}, \n    w2v::AffineTransform{C}, \n    itfm::Union{Vector{XFM},XFM};\n    interp::I=BSpline(Quadratic(Line(OnCell()))),\n    fill=0.0,\n    ftol=1.0/80,\n    max_iter=10)\n\nResample 3D array using transformation \n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.resample_volume-Union{Tuple{Minc2.Volume3D{T, 3}}, Tuple{XFM}, Tuple{I}, Tuple{O}, Tuple{T}} where {T, O, I, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.resample_volume","text":"resample_volume(\n    in_vol::Volume3D{T,3};\n    like::Union{Volume3D{O,3},Nothing}=nothing,\n    tfm::Union{Vector{XFM},XFM,Nothing}=nothing, \n    itfm::Union{Vector{XFM},XFM,Nothing}=nothing, \n    interp::I=nothing, \n    fill=0.0,\n    order=1,\n    ftol=1.0/80,\n    max_iter=10)::Volume3D\n\nResample Volume3D using transformation \n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.reshape_volume-Union{Tuple{Minc2.Volume3D{T, N}}, Tuple{N}, Tuple{T}} where {T, N}","page":"Function reference","title":"Minc2.reshape_volume","text":"Reshape Volume3D Work in progress DO NOT USE\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.save_volume-Union{Tuple{N}, Tuple{T}, Tuple{S}, Tuple{AbstractString, Minc2.Volume3D{T, N}}} where {S, T, N}","page":"Function reference","title":"Minc2.save_volume","text":"save_volume(fn::AbstractString, \n    vol::Volume3D{T,N}; \n    store::Type{S}=Float32,\n    history=nothing)\n\nSave Volume3D to minc file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.tfm_to_grid!-Union{Tuple{XFM}, Tuple{C}, Tuple{T}, Tuple{Union{Vector{XFM}, XFM}, AbstractArray{T, 4}, Minc2.AffineTransform{C}}} where {T, C, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.tfm_to_grid!","text":"tfm_to_grid!(\n    tfm::Union{Vector{XFM}, XFM}, \n    grid::AbstractArray{T,4},\n    v2w::AffineTransform{C};\n    ftol=1.0/80,max_iter=10)::AbstractArray{T,4}\n\nConvert arbitrary transformation  into vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.tfm_to_grid-Union{Tuple{G}, Tuple{XFM}, Tuple{T}, Tuple{Union{Vector{XFM}, XFM}, G}} where {T, XFM<:Minc2.AnyTransform, G<:Minc2.Volume3D}","page":"Function reference","title":"Minc2.tfm_to_grid","text":"tfm_to_grid(\n    tfm::Union{Vector{XFM}, XFM},\n    ref::G;\n    store::Type{T}=Float64,ftol=1.0/80,max_iter=10)::Volume3D{T,4}\n\nConvert arbitrary transformation  into Volume3D with 4D array containing vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.voxel_to_world-Tuple{Minc2.Volume3D}","page":"Function reference","title":"Minc2.voxel_to_world","text":"voxel_to_world(vol::Volume3D)\n\nExtract voxel to world affine transform from a Volume3D\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.world_to_voxel-Tuple{Minc2.Volume3D}","page":"Function reference","title":"Minc2.world_to_voxel","text":"world_to_voxel(vol::Volume3D)\n\nExtract world to voxel affine transform from a Volume3D\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.GridTransform-Tuple{V} where V<:Minc2.Volume3D","page":"Function reference","title":"Minc2.GridTransform","text":"GridTransform(vol::V)\n\nCreate GridTransform from Volume3D, assume it is a vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.InverseGridTransform-Tuple{V} where V<:Minc2.Volume3D","page":"Function reference","title":"Minc2.InverseGridTransform","text":"InverseGridTransform(vol::V)\n\nCreate InverseGridTransform from Volume3D, assume it is a vector field\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.Volume3D","page":"Function reference","title":"Minc2.Volume3D","text":"An abstract 3D volume, could be vector field or volume with time dimension\n\nFields\n\nvol: underlying array\nv2w: Voxel to world affine transform\nhistory: minc history\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.Volume3D-Union{Tuple{N}, Tuple{T}, Tuple{Array{T, N}, Minc2.AffineTransform{Float64}}} where {T, N}","page":"Function reference","title":"Minc2.Volume3D","text":"Volume3D(vol::Array{T,N}, v2w::AffineTransform{Float64}; \n    history::Union{AbstractString,Nothing}=nothing)::Volume3D{T,N}\n\nCreate Volume3D from an array and affine transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.Volume3D-Union{Tuple{N}, Tuple{T}, Tuple{Array{T, N}, Minc2.Volume3D}} where {T, N}","page":"Function reference","title":"Minc2.Volume3D","text":"Volume3D(vol::Array{T,N}, like::Volume3D; \n    history::Union{AbstractString,Nothing}=nothing)::Volume3D{T,N}\n\nCreate Volume3D from an array and another Volume3D that is used for sampling information\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.lps_to_ras-Tuple{Minc2.AffineTransform}","page":"Function reference","title":"Minc2.lps_to_ras","text":"lps_to_ras(xfm::Minc2.AffineTransform)\n\nConvert coordinates from LPS to RAS\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.lps_to_ras-Union{Tuple{Minc2.Volume3D{T}}, Tuple{T}} where T","page":"Function reference","title":"Minc2.lps_to_ras","text":"lps_to_ras(vol::Minc2.Volume3D{T})::Minc2.Volume3D{T}\n\nConvert coordinates from LPS to RAS\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_ants_transform-Union{Tuple{AbstractString}, Tuple{T}} where T","page":"Function reference","title":"Minc2.read_ants_transform","text":"read_ants_transform(fn::AbstractString; store::Type{T}=Float32)::Minc2.AnyTransform\n\nRead .txt and .nii(.nii.gz) transforms produces by ANTs\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_itk_nifti_transform-Union{Tuple{AbstractString}, Tuple{T}} where T","page":"Function reference","title":"Minc2.read_itk_nifti_transform","text":"read_itk_nifti_transform(fn::AbstractString;\n    store::Type{T}=Float32)::Minc2.GridTransform{Float64,T}\n\nRead ANTs style warp transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_itk_txt_transform-Tuple{AbstractString}","page":"Function reference","title":"Minc2.read_itk_txt_transform","text":"read_itk_txt_transform(fn::AbstractString)::Minc2.AffineTransform{Float64}\n\nRead ITK legacy transform in .txt format\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.read_nifti_volume-Union{Tuple{AbstractString}, Tuple{T}} where T","page":"Function reference","title":"Minc2.read_nifti_volume","text":"read_nifti_volume(fn::AbstractString; store::Type{T}=Float64)::Volume3D{T}\n\nRead Volume3D from .nii or .nii.gz file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.save_nifti_volume-Union{Tuple{S}, Tuple{T}, Tuple{AbstractString, Minc2.Volume3D{T}}} where {T, S}","page":"Function reference","title":"Minc2.save_nifti_volume","text":"save_nifti_volume(fn::AbstractString, vol::Volume3D{T}; \n    store::Type{S}=Float32, history=nothing)\n\nSave Volume3D into .nii or .nii.gz file\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_itk_nifti_transform-Union{Tuple{S}, Tuple{T}, Tuple{AbstractString, Minc2.GridTransform{Float64, T}}} where {T, S}","page":"Function reference","title":"Minc2.write_itk_nifti_transform","text":"write_itk_nifti_transform(fn::AbstractString,\n    xfm::Minc2.GridTransform{Float64,T}; store::Type{S}=Float32)\n\nWrite ANTs style warp transform\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.write_itk_txt_transform-Tuple{AbstractString, Minc2.AffineTransform{Float64}}","page":"Function reference","title":"Minc2.write_itk_txt_transform","text":"write_itk_txt_transform(fn::AbstractString,\n    xfm::Minc2.AffineTransform{Float64})\n\nWrite affine transform in ITK .txt format\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.append_grid_transform-Tuple{Minc2.TransformHandle, String}","page":"Function reference","title":"Minc2.append_grid_transform","text":"append_grid_transform(h::TransformHandle, grid_file::String; inv::Bool=false)\n\nLow level: Append grid transform  to an open transformation handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.append_linear_transform-Tuple{Minc2.TransformHandle, Minc2.AffineTransform}","page":"Function reference","title":"Minc2.append_linear_transform","text":"append_linear_transform(h::TransformHandle, lin::AffineTransform)\n\nLow level: Append affine transform to an open transformation handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.concat_xfm-Tuple{Minc2.TransformHandle, Minc2.TransformHandle}","page":"Function reference","title":"Minc2.concat_xfm","text":"concat_xfm(h::TransformHandle, i::TransformHandle)\n\nLow level: concatenate two transfomations\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_grid_transform-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.get_grid_transform","text":"get_grid_transform(h::TransformHandle; n::Int64=0)\n\nLow level: extract reference to a grid file from open handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_linear_transform-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.get_linear_transform","text":"get_linear_transform(h::TransformHandle; n::Int64=0)::AffineTransform{Float64}\n\nLow level: extract AffineTransform{Float64} from open handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_linear_transform_param-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.get_linear_transform_param","text":"get_linear_transform_param(h::TransformHandle;n::Int64=0,center::Union{Nothing,Vector{Float64}}=nothing)\n\nLow level: extact transformation parameters from affine transform , returns named tuple with fields center, translations, scales, shears, rotations\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_n_concat-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.get_n_concat","text":"get_n_concat(h::TransformHandle)::Int64\n\nLow level: Get number of transformations in open handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.get_n_type-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.get_n_type","text":"get_n_type(h::TransformHandle; n::Int64=0)::XFM\n\nLow level: Get transform type  for nth transform in open handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.inverse_transform_point-Tuple{Minc2.TransformHandle, Vector{Float64}}","page":"Function reference","title":"Minc2.inverse_transform_point","text":"inverse_transform_point(h::TransformHandle, xyz::Vector{Float64})::Vector{Float64}\n\nLow level: Inverse transform point xyz using minc transform h\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.invert_transform-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.invert_transform","text":"invert_transform(h::TransformHandle)\n\nLow level: Invert minc transform  h\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.load_transforms-Tuple{Minc2.TransformHandle}","page":"Function reference","title":"Minc2.load_transforms","text":"load_transforms(h::TransformHandle)::Vector{AnyTransform}\n\nLow level: Load all transforms from open .XFM handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.load_transforms-Tuple{String}","page":"Function reference","title":"Minc2.load_transforms","text":"load_transforms(fname::String)::Vector{AnyTransform}\n\nLoad transformations from .xfm file fname\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.open_xfm_file-Tuple{String}","page":"Function reference","title":"Minc2.open_xfm_file","text":"Low level: Open transform xfm file, return handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.save_transforms-Union{Tuple{XFM}, Tuple{T}, Tuple{String, Union{Vector{XFM}, XFM}}} where {T, XFM<:Minc2.AnyTransform}","page":"Function reference","title":"Minc2.save_transforms","text":"save_transforms(fname::String, \n    xfm::Union{Vector{XFM}, XFM};\n    grid_store::Type{T}=Float32 ) where {T, XFM<:AnyTransform}\n\nSave transformations into .xfm file, \n\nArguments\n\nfname: output file name\nxfm: vector of transformations to save, or a single transformation\ngrid_store: type of storage for grid files (default: Float32)\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.save_xfm_file-Tuple{Minc2.TransformHandle, String}","page":"Function reference","title":"Minc2.save_xfm_file","text":"save_xfm_file(h::TransformHandle, path::String)\n\nLow level: Save information into file from an open handle\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.transform_point-Tuple{Minc2.TransformHandle, Vector{Float64}}","page":"Function reference","title":"Minc2.transform_point","text":"transform_point(h::TransformHandle, xyz::Vector{Float64})::Vector{Float64}\n\nLow level: Transform point xyz using minc transform h\n\n\n\n\n\n","category":"method"},{"location":"reference/api/#Minc2.TransformHandle","page":"Function reference","title":"Minc2.TransformHandle","text":"Low level: minc2_simple XFM transform handle\n\n\n\n\n\n","category":"type"},{"location":"reference/api/#Minc2.XFM","page":"Function reference","title":"Minc2.XFM","text":"@enum XFM\n\nLow level: transformation types stored in .xfm file\n\n\n\n\n\n","category":"type"},{"location":"#MINC2-for-Julia","page":"Introduction to Minc2.jl","title":"MINC2 for Julia","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Read and write MINC2 files from Julia, reading and writing .xfm transformation files,  Manipulations with volumes","category":"page"},{"location":"#Examples","page":"Introduction to Minc2.jl","title":"Examples","text":"","category":"section"},{"location":"#Read-a-3D-minc-volume,-calculate-mean-value","page":"Introduction to Minc2.jl","title":"Read a 3D minc volume, calculate mean value","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Minc command:","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"> mincstats -mean mni_icbm152_t1_tal_nlin_sym_09c.mnc\nMean:              29.61005195","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Julia version:","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using Minc2\nusing StatsBase\n\n# read volume from minc file, represent it as array of doubles (Float64 in julia world)\nicbm=Minc2.read_volume(\"mni_icbm152_t1_tal_nlin_sym_09c.mnc\", store=Float64)\n@show mean(Minc2.array(icbm))","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Output mean(Minc2.array(icbm)) = 29.61005194874031","category":"page"},{"location":"#Read-a-3D-volume-with-real-values,-and-another-one-with-mask-labels-and-show-statistics-per-label","page":"Introduction to Minc2.jl","title":"Read a 3D volume with real values, and another one with mask labels and show statistics per label","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using Minc2\nusing StatsBase\n\n# read T1w scan\nicbm=Minc2.read_volume(\"mni_icbm152_t1_tal_nlin_sym_09c.mnc\", store=Float64)\n# read label mask, represent it as array of bytes \nlab=Minc2.read_volume(\"mni_icbm152_cls_tal_nlin_sym_09c.mnc\", store=UInt8)\n\n# calculate image statistics per label\nfor (i,l) in [1=>\"CSF\",2=>\"GM\",3=>\"WM\"]\n    println(\"$(l):$(mean(Minc2.array(icbm)[ Minc2.array(lab).==i ]))\")\nend","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Output:","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"CSF:31.263195070792978\nGM:64.88399427312729\nWM:84.74593912912998","category":"page"},{"location":"#Apply-transformation-stored-in-.xfm-file-to-a-minc-volume,-save-result","page":"Introduction to Minc2.jl","title":"Apply transformation stored in .xfm file to a minc volume, save result","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Create transformation:param2xfm -rotations 30 0 0 rotate.xfm","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using Minc2\n\n# read T1w scan\nicbm=Minc2.read_volume(\"mni_icbm152_t1_tal_nlin_sym_09c.mnc\", store=Float64)\n\n# read transformation\ntfm=Minc2.load_transforms(\"rotate.xfm\")\n\n# apply transformation to the volume\ntransformed_icbm=Minc2.resample_volume(icbm; tfm, order=2, fill=0.0)\n\n# write the resulting volume into file, append history\n# the resulting volume will be stored with unsigned short minc data type\n# but will preserve floating point vales used fixe-point arithmetics\nMinc2.save_volume(\"transformed_icbm.mnc\",transformed_icbm, store=UInt16, history=\"Julia example\")","category":"page"},{"location":"#Integrate-jacobians-per-ROI,-based-on-a-transformation-in-.xfm-file","page":"Introduction to Minc2.jl","title":"Integrate jacobians per ROI, based on a transformation in .xfm file","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using Minc2\n\n# read ROI labels\nrois = Minc2.read_volume(\"rois.mnc\", store=UInt8)\n\n# calculate voxel volume \nstart, step, dir_cos = Minc2.decompose(Minc2.voxel_to_world(rois))\nvoxel_volume = abs(reduce(*,step,init=1))\n\n# read transformation\ntfm = Minc2.load_transforms(\"nonlinear.xfm\")\n\n# define sampling parameters for jacobian field\njacobians = Minc2.empty_volume_like(lab, store=Float64)\n\n# calculate per-voxel jacobians\nMinc2.calculate_jacobian!(tfm, jacobians)\n\n# Integrate per ROI\nfor (i,l) in [1=>\"ROI-1\",2=>\"ROI-2\",3=>\"ROI-3\"]\n    println(\"$(l):$( sum((Minc2.array(rois) .== i) .* Minc2.array(jac) )*voxel_volume)\")\nend","category":"page"},{"location":"#Graphic-examples,-using-Makie","page":"Introduction to Minc2.jl","title":"Graphic examples, using Makie","text":"","category":"section"},{"location":"#Show-MNI-ICBM152-template-contours-with-tissue-masks-overlays","page":"Introduction to Minc2.jl","title":"Show MNI-ICBM152 template contours with tissue masks overlays","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using CairoMakie\nusing Minc2\n\n# read T1w scan\nicbm=Minc2.read_volume(\"mni_icbm152_t1_tal_nlin_sym_09c.mnc\", store=Float64)\n# read label mask, represent it as array of bytes \nlab=Minc2.read_volume(\"mni_icbm152_cls_tal_nlin_sym_09c.mnc\", store=UInt8)\n\n\nfig = Figure()\ngc = fig[1, 1] = GridLayout()\n\nMinc2.draw_outline_with_labels(gc, icbm, lab, \n    labels=Dict([1=>\"CSF\",2=>\"GM\",3=>\"WM\"]),\n    nslices = 5)\n\nresize_to_layout!(fig)\n\nsave(\"mni_icbm152_segmentation.png\", fig, px_per_unit = 1)","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Will produce","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"(Image: MNI-ICBM152)","category":"page"},{"location":"#Show-MNI-ICBM152-template-contours-with-GM-proability-map","page":"Introduction to Minc2.jl","title":"Show MNI-ICBM152 template contours with GM proability map","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"using CairoMakie\nusing Minc2\n\n# read T1w scan\nanat=Minc2.read_volume(\"mni_icbm152_t1_tal_nlin_sym_09c.mnc\",store=Float64)\n# read field\ngm=Minc2.read_volume(\"mni_icbm152_gm_tal_nlin_sym_09c.mnc\",store=Float64)\n\nfig = Figure()\ngc = fig[1, 1] = GridLayout()\n\n# set background to transparent\nMinc2.array(gm)[Minc2.array(gm) .< 1e-6] .= NaN\n\nMinc2.draw_outline_with_heatmap(gc, anat, gm, \n    heat_limits=(0.0,1.0),cmap=:turbo,\n    nslices = 5)\n\nresize_to_layout!(fig)\n\nsave(\"mni_icbm152_gm.png\", fig, px_per_unit = 1) ","category":"page"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Will produce (Image: MNI-ICBM152)","category":"page"},{"location":"#More-examples","page":"Introduction to Minc2.jl","title":"More examples","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"See examples directory for more examples","category":"page"},{"location":"#MINC-documentation","page":"Introduction to Minc2.jl","title":"MINC documentation","text":"","category":"section"},{"location":"","page":"Introduction to Minc2.jl","title":"Introduction to Minc2.jl","text":"Underlying MINC documentations is available at https://en.wikibooks.org/wiki/MINC","category":"page"}]
}
